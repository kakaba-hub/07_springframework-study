## 스프링 특징 - AOP (Aspect Oriented Programming) ##
1. 관점 지향 프로그래밍
2. 핵심로직(비즈니스로직)마다 매번 반복해서 공통적으로 처리해야 되는 로직(로깅, 트랜잭션 등)을
   하나로 정의해두고 내가 원하는 시점에 반복 적용 시키는 프로그래밍 방식
3. 개발이 다 끝난 후에 핵심로직을 건들지 않고도 공통로직만을 따로 작성해서 원하는 시점에 실행되도록 할 수 있음
4. 공통로직은 따로 생각하고 우선 핵심로직만 집중해서 코딩할 수 있음

------------------------------------------------------------------------------------------------------------------------

* AOP 관련 용어
1) JoinPoint : Advice를 적용할 수 있는 모든 실행 시점
2) Pointcut  : Advice를 실제로 적용할 지점을 선별하는 조건 또는 표현식
3) Advice    : AOP 동작 자체 (즉, 실행시키고자하는 공통로직)

* Advice 동작 시점
1) @Before : Pointcut 동작 이전
2) @After  : Pointcut 동작 이후 (정상동작|예외발생 상관 없음)ㅏ
3) @Around : Pointcut 동작 이전과 이후
4) @AfterReturning : Pointcut 정상완료 이후
5) @AfterThrowing  : Pointcut 예외발생 이후

* Advice 동작 순서
1) Before Advice : @Before -> Pointcut
2) After Advice  : Pointcut -> @After
3) Around Advice : @Around -> Pointcut -> @Around (가장 많이 사용하는 Advice. 일반적으로 이거 하나면 됨.)
4) 모두 사용하면 : @Around -> @Before -> Pointcut -> @After -> @Around

* Pointcut을 결정하는 표현식 작성법
1) 형식
   execution (반환타입 패키지.클래스.메소드(매개변수))
2) 상세 형식
   (1) 반환타입
        →  *     : 모든 반환타입
        →  void  : void 반환타입
        →  !void : void 가 아닌 반환타입
   (2) 매개변수
        →  *     : 1개의 모든 매개변수
        →  ..    : 모든 매개변수


* Before Advice 메소드 작성 방법
1) 반환타입 : void
2) 메소드명 : 마음대로
3) 매개변수 : JoinPoint 타입 객체 (생략 가능, Pointcut에 의해 실행되는 핵심로직 메소드에 대한 정보를 알아내고자 할 경우 작성)

* After Advice 메소드 작성 방법
1) 반환타입 : void
2) 메소드명 : 마음대로
3) 매개변수 : JoinPoint 타입 객체 (생략 가능, Pointcut에 의해 실행되는 핵심로직 메소드에 대한 정보를 알아내고자 할 경우 작성)

* Around Advice 메소드 작성 방법
1) 반환타입 : Object
2) 메소드명 : 마음대로
3) 매개변수 : ProceedingJoinPoint 타입 객체 (JoinPoint 의 자식 타입)
4) 본문내용 : ProceedingJoinPoint 객체를 통해 핵심로직 메소드를 직접 실행시키고 이때 반환된 객체를 return 해야됨