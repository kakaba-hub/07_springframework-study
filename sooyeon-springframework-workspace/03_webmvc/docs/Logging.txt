## Logging ##
1. 시스템의 작동 상태를 기록하거나 사용자의 습성 조사 및 시스템 동작들을 분석하기 위해
   각종 정보를 기록하는걸 의미
2. 사용자가 시스템을 이용하면서 발생되는 문제점(장애)들을 기록해둬야 후에 유지보수를 할 수 있음
3. 또한 개발 당시 디버깅 목적으로 print 관련 메소드를 통해 출력시 성능저하를 야기시키므로 Log로 출력해야됨
4. 장단점
   1) 장점
       → 프로그램 문제 파악 용이
       → 빠르고 효율적인 디버깅 가능
       → 로그 이력을 파일, DB 등 외부에 남길 수 있음
   2) 단점
       → 로깅시 디바이스(파일 및 db 등) 입출력으로 인해 런타임 오버헤드 발생
       → 로깅을 위한 추가 코드로 인해 전체 코드의 사이즈 증가
       → 심하게 생성되는 로그는 혼란을 야기하거나 어플리케이션 성능에 영향을 미침
5. Logging Framework
   1) 종류 : log4j, log4j2, logback, slf4j
   2) Spring Framework는 기본적으로 log4j를 사용하도록 되어있음 => 단, 많은 양의 로그 출력시 성능저하 야기
   3) Spring Boot는 기본적으로 logback을 사용하도록 되어있음 (요즘 많이 사용하는 추세)
   4) 여러 Logging 프레임워크를 사용할 때 slf4j가 중간 인터페이스 역할을 수행하여
      다양한 Logging 프레임워크간에 호환성을 보장하는 역할을 수행함

   → 수업시간에는 logback(https://logback.qos.ch) 사용

------------------------------------------------------------------------------------------------------------------

## 로그레벨 (아래로 갈수록 레벨이 높아짐) ##
1. TRACE : 디버깅보다 상세한 정보 표현용
2. DEBUG : 개발 단계에서 디버깅 용
3. INFO  : 정보성 메세지 기록용
4. WARN  : 처리가능하나 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지 기록용
5. ERROR : 요청 처리 중 문제가 발생 기록용
6. FATAL : 아주 심각한 시스템적인 문제 발생 기록용

------------------------------------------------------------------------------------------------------------------

## logback.xml 작업 ##

* <appender>
1) 전달된 로그를 어디에 출력할지 결정하는 역할 (콘솔, 파일, db 등)
2) 참고 : https://logback.qos.ch/manual/appenders.html
3) 주요 종류
    → ConsoleAppender     : 로그를 콘솔에 출력
    → JDBCAppender        : 로그를 RDB에 출력
    → FileAppender        : 로그를 파일에 출력 (단, 지정한 파일에 로그가 계속 쌓이기 때문에 크기가 지나치게 커질 수 있고 지속적인 로그관리 불가능해짐)
    → RollingFileAppender : FileAppender를 보완한 개념
                            ex) DailyRollingFileAppender : 일정한 조건 후에 기존파일을 백업파일로 바꾸고 다시 처음부터 로깅 시작

* <encoder>, <pattern>
1) 로그를 어떤 포맷으로 출력할껀지 출력패턴을 결정하는 역할
2) 참고 : https://logback.qos.ch/manual/layouts.html#ClassicPatternLayout
3) 주요 패턴
    → %logger{n}  : 로거주체 (로그가 찍히는 클래스)  => %logger{0} 으로 하면 클래스명만 출력
    → %line       : 로거 발생 라인
    → %date       : yyyy-MM-dd HH:mm:ss.SSS 형식으로
    → %date{포맷} : 포맷반영한 날짜 (포맷에 ,를 포함시키려면 따옴표로 포맷을 묶어야됨)
    → %level      : 로그레벨
    → %msg        : 로그 메세지

* <root>
1) 현재 애플리케이션의 "모든 패키지안"의 특정 레벨 이상의 로그를 특정 appender에 적용시켜 출력
2) 작성방법
   <root level="로그레벨(해당레벨이상의 로그만이 출력됨)">
       <appender-ref ref="로그를 출력시킬 appender"/>
   </root>

* <logger>
1) "특정 패키지안"의 특정 레벨 이상 로그를 특정 appender에 적용시켜 출력
2) 작성방법
   <logger name="특정패키지" level="로그레벨" [additivity="root logger로 전달여부(기본값 true)"]>
        [<appender-ref ref="로그를 출력시킬 appender" />]
   </logger>

** 기본적으로 logger가 먼저 반영되고 root logger가 반영됨