## MVC 패턴 ##
1. 소프트웨어 개발시 사용되는 디자인 패턴 중 하나
2. 하나의 애플리케이션을 구현할 때 구성요소들을 Model, View, Controller로 역할을 구분하는 패턴
3. 클래스마다 로직을 분리하여 작성해둘 경우 유지보수와 생산성이 향상됨
4. 역할
   1) Model
       → 애플리케이션의 데이터와 관련된 역할을 수행
       → 데이터 전송, 데이터 접근, 비즈니스 로직 등과 같은 작업 수행
   2) View
       → 애플리케이션에서의 시각적인 요소와 관련된 역할을 수행
       → 화면, 사용자 인터페이스 요소
   3) Controller
       → View에서 보낸 요청과 응답을 처리하는 역할을 수행
       → Model과 View 사이의 데이터 흐름을 제어

---------------------------------------------------------------------------------------------------------------

## Spring Web MVC 모듈 ##
1. Spring Framework에서 웹 애플리케이션 개발을 위한 모듈
2. MVC 패턴을 기반으로 동작
3. Model, View, Controller 사이의 의존 관계를 DI를 통해 관리하므로 유연하게 웹 애플리케이션 개발 가능


## Spring Web MVC 동작 흐름 ##
                                    ┌────────────────┐
                                    │ HandlerMapping │
                                    └────────────────┘
                                       ▲ (2) handler 조회
                                       │     == controller 검색
┌────────┐                        ┌─────────────────────┐                      ┌────────────┐                     ┌─────────┐                  ┌─────┐                  ┌────┐
│        │ ──(1) 요청(request)──▶ │                     │ ─(3) handler 호출──▶ │            │ ─(4) service 호출─▶ │         │ ─(5) dao 호출──▶ │     │ ─(6) 쿼리 실행─▶ │    │
│ Client │                        │  DispatcherServlet  │                      │ Controller │                     │ Service │                  │ Dao │                  │ DB │
│        │ ◀─(14) 응답(response)─ │                     │ ◀─(10) ModelAndView─ │            │ ◀──(9) 결과 반환─── │         │ ◀─(8) 결과 반환─ │     │ ◀─(7) 결과 반환─ │    │
└────────┘                        └─────────────────────┘           반환       └────────────┘                     └─────────┘                  └─────┘                  └────┘
                                   │                 ▲ │
                  (13) render 호출 │   (12) View반환 │ │ (11)  ViewResolver 호출
                                   ▼                 │ ▼
                              ┌──────┐     ┌──────────────┐
                              │ View │     │ ViewResolver │
                              └──────┘     └──────────────┘

1) 클라이언트 요청 (request)
2) 스프링에서 제공하는 DispatcherServlet이 해당 요청을 먼저 받아줌
3) DispatcherServlet이 요청 처리할 Controller를 찾아주는 HandlerMapping이라는걸 호출
4) HandlerMapping은 요청 처리할 Controller를 찾아 호출
5) Controller는 비즈니스 로직 처리를 담당하는 Service 호출
6) 요청 처리 완료 후 Controller에서는 응답을 처리할 Model 과 View 세팅
7) Controller에서는 ModelAndView를 DispatcherServlet으로 반환
8) DispatcherServlet은 해당 뷰 정보를 ViewResolver에게 전달
9) ViewResolver는 전달받은 뷰 정보를 가지고 뷰 명 앞에 prefix 값 붙이고 뒤에 suffix 값 붙여서 응답할 뷰에 대한 전체 정보를 완성시킴
10) 해당 응답 뷰가 로드되어 클라이언트에게 보여짐

---------------------------------------------------------------------------------------------------------------

## Spring Web MVC 주요 구성 요소 ##
- DispatcherServlet : 클라이언트의 요청을 받고 적절한 컨트롤러를 실행시켜 해당 컨트롤러가 리턴한 결과값을 가지고 응답을 생성해줌
- HandlerMapping    : 클라이언트의 요청 url을 어떤 컨트롤러가 처리할지 결정해줌
- Controller        : 클라이언트의 요청을 처리한 뒤, 응답 관련 Model과 View를 세팅하여 DispatherServlet으로 반환
- ModelAndView      : 컨트롤러가 처리한 결과 정보 및 뷰 선택에 필요한 정보를 담음
- ViewResolver      : 컨트롤러의 처리 결과를 생성할 View를 결정해줌

---------------------------------------------------------------------------------------------------------------

## @RequestMapping(value="", method="") ##
1. 요청을 인식하는 어노테이션으로 url 매핑값과 요청 메소드(GET, POST)를 인식함
2. url요청과 실행시킬 메소드를 매핑시켜주는 어노테이션으로 @Controller 내의 메소드 상단에 작성
3. url요청시 처음 요청을 받아주는 DispatcherServlet과 HandlerMapping에 의해 해당 메소드가 자동으로 실행됨
4. 주요 속성
   1) value  : URL Mapping 값 (여러개 작성도 가능), 속성명 생략시 기본값
   2) method : 요청 방식 (RequestMethod.GET, RequestMethod.POST와 같이 상수값으로 작성)
5. 메소드 작성법
   1) 반환타입
       (1) String : 응답할 페이지의 경로를 문자열로 반환
       (2) void   : 반환값이 없을 경우 응답할 페이지의 경로는 url 매핑값과 동일하게 인식됨
                    ex) /board/list.do 요청시
                        /board/list.jsp 페이지를 응답페이지로 인식함
   2) 메소드명
       (1) 아무 역할이 없으므로 아무렇게 작성 가능 (우리가 직접 호출하지도 않음)
   3) 매개변수
       (1) 요청과 응답을 위한 각종 변수들 선언
       (2) 주로 사용되는 매개변수
            → HttpServletRequest  : 요청관련 객체
            → HttpServletResponse : 응답관련 객체
            → HttpSession         : 세션관련 객체
            → 커맨드객체          : 요청시 전달값(파라미터)을 받는 DTO 같은 객체
            → 일반 변수           : 요청시 파라미터를 받는 변수
            → Model               : 응답페이지 포워딩시 필요한 데이터(attribute)를 담는 객체
            → ModelAndView        : Model(attribute) + View(뷰정보)를 같이 담는 객체
            → RedirectAttribute   : redirect 할 때 필요한 데이터(flash attribute)를 담는 객체
            → ...

## @GetMapping(""), @PostMapping("") ##
1. 각 요청 방식에 따른 @RequestMapping의 대체 어노테이션
2. @RequestMapping으로 method 속성을 작성할 필요 없음
3. 단, Spring4 부터 지원

---------------------------------------------------------------------------------------------------------------

## servlet-context.xml 설정 ##
1. DispatcherServlet 객체 생성시 읽어들여지는 Spring Bean Configuration File 임
2. 즉, 요청과 관련된 설정 및 Bean 등록 관련 구문을 작성하는 파일

* <mvc:annotation-driven>
1) @Controller어노테이션을 활성화해주는 태그
2) Spring MVC에서 각 요청에 따른 Controller를 실행시키기 위해 필요한
   HandlerMapping과 HandlerAdapter를 자동으로 bean으로 등록해줌

* <context:component-scan>
1) base-package의 모든 하위 클래스들을 스캔하면서 (빈스캐닝) @Component타입의 어노테이션이 부여되어있는
   클래스들을 자동으로 Bean으로 등록해줌
2) MVC 역할별 세분화된 어노테이션들 존재
   @Component
     ㄴ @Controller
     ㄴ @Service
     ㄴ @Repository

* <bean>으로 ViewResolver 빈 등록
1) DispatcherServlet으로 반환된 뷰 정보를 가지고 포워딩할 응답뷰를 찾아 사용자에게 보여주는 역할
2) 빈으로 등록이 되어있어야 스프링이 알아서 호출하여 실행해줌
3) 응답뷰 경로의 공통적인 앞과 뒤의 부분을 prefix, suffix 필드의 setter 주입으로 설정해둘 수 있음

* <mvc:resources>
1) 정적 자원(이미지, 오디오, 비디오, css, js 등)들을 관리하는 디렉토리의 경로를 설정해두는 태그
2) 외부에서 직접 정적 자원에 접근할 수 있도록 매핑해주는 xml 태그
3) 요청되는 url 값을 mapping 속성에 이때 찾아지는 정적 자원의 경로를 location 속성에 작성

---------------------------------------------------------------------------------------------------------------

## 응답 처리 ##
1. jsp로 포워딩
   1) 응답페이지 제작을 jsp로 위임하는 방법
       → 스프링 전 : RequestDispatcher라는 위임 객체 사용하여 forward
          RequestDispatcher rd = request.getRequestDispatcher("포워딩할경로");
          rd.forward(request, response);
       → 스프링 후 : controller 메소드에서 뷰 경로 반환
          return "포워딩할경로";
   2) DispatcherServlet으로 뷰 정보가 반환되고 ViewResolver가 자동 수행됨
       → 경로 완성 : prefix + "반환된경로" + suffix
   3) 만일 "포워딩할경로"를 반환하지 않으면 url mapping 경로의 뷰를 찾음
       → 경로 완성 : prefix + "url mapping" + suffix
2. url 재요청(redirect)
   1) 기존에 존재하는 url을 재요청하는 방법
       → 스프링 전 : HttpServletResponse객체의 sendRedirect 메소드 사용
          response.sendRedirect("재요청할 url");
       → 스프링 후 : controller 메소드에서 재요청할 url 경로 반환
          return "redirect:재요청할url";
3. 응답데이터(text/html, application/json) 반환
   1) 직접 응답데이터를 요청한 클라이언트 측으로 반환
       response.setContentType("응답데이터mime-type");
       PrintWriter out = response.getWriter();
       out.println(응답데이터);

---------------------------------------------------------------------------------------------------------------

## 요청 파라미터 처리 ##
1. HttpServletRequest 이용하는 방법
   1) Controller 측 메소드 매개변수로 HttpServletRequest 설정시 스프링이 자동으로 주입해줌
   2) HttpServletRequest로 부터 getParameter 관련 메소드를 통해 파라미터 추출 후 변수에 대입
2. @RequestParam 이용하는 방법 (Spring 고유기능)
   1) HttpServletRequest의 getParameter 메소드를 대신 처리해주는 Spring 어노테이션
   2) Controller 측 메소드의 매개변수로 전달되는 파라미터를 대입시킬 변수 설정 + @RequestParam 작성
   3) 주요 속성
       → value        : 파라미터들 중 추출하고자 하는 파라미터명
       → request      : 파라미터 값의 필수 여부 (기본값 true)
       → defaultValue : 파라미터가 존재하지 않을 경우 대입시킬 기본값 설정
   4) 만일 파라미터명과 대입시킬 매개변수명이 동일할 경우 @RequestParam 어노테이션 생략 가능
3. 커맨드 객체 이용하는 방법 (Spring 고유기능)
   1) 커맨드 객체 : 요청 파라미터들을 각 필드에 담을 수 있는 객체
                    정확히는 요청 파라미터 담을 수 있는 필드를 가지는 객체를 의미함
   2) 즉, 전달되는 파라미터들을 바로 객체의 필드에 담고자 할 경우 사용
   3) Controller 측 메소드의 매개변수로 커맨드 객체를 제시하고
      파라미터명을 담고자하는 필드명과 동일하게 작성하면 됨

---------------------------------------------------------------------------------------------------------------

## 응답 어트리뷰터 처리 ##
1. 포워딩 되는 페이지에 필요한 데이터 담기
   1) Model 객체 이용하기
      → Model : requestScope로 데이터를 맵형식(key-value)로 담을 수 있는 객체
      → Controller 측 메소드의 매개변수로 Model을 설정해두면 Spring이 알아서 객체를 주입해주고
      → 필요한 데이터를 addAttribute("attribute명", 담고자하는데이터) 메소드로 담기
   2) ModelAndView 객체 이용하기
      → ModelAndView : 데이터를 담는 Model과 뷰정보를 담는 View가 합쳐져있는 객체
      → Controller 측 매개변수로 ModelAndView를 설정해두면 Spring이 알아서 객체를 주입해주고
      → 필요한 데이터를 addObject 메소드로 담고, 뷰경로를 setViewName 메소드로 담기
      → 단, Controller 측 메소드의 반환을 ModelAndView로 해야됨
2. redirect 되는 페이지에 필요한 데이터 담기
   1) RedirectAttributes 객체 이용하기
      → Model 영역에 데이터를 담게 되면 바로 forwarding 되는 페이지에서만 사용가능하기 때문에
        redirect에 의해 포워딩되는 페이지에서 데이터를 사용하기 위해서는 Model에 담아서는 안됨
      → Controller 측 매개변수로 RedirectAttributes를 설정해두면 Spring이 알아서 객체를 주입해줌
      → 필요한 데이터를 addFlashAttribute 메소드로 담기