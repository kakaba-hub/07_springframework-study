## Build System ##
1. 소프트웨어를 빌드하고 패키징하는데 사용되는 도구
2. 소프트웨어 개발의 생산성과 효율성을 향상 시키기 위해 자동화 작업 수행
3. 소스코드와 라이브러리의 의존성을 처리하고 테스트 및 배포를 수행함
4. 주요 Build System 종류
   1) Maven
      (1) XML 기반(pom.xml)으로 빌드 작업을 수행
      (2) 의존성 관리와 빌드 과정의 표준화가 잘 이루어져있음
      (3) 중앙 저장소에서 필요한 라이브러리를 자동으로 다운 받아 사용할 수 있음
      (4) 단, 빌드 시간이 오래 걸리는 단점이 있음
   2) Gradle
      (1) Groovy 기반으로 빌드 작업을 수행
      (2) Maven 보다 더 빠르고, 유연성이 높음
      (3) 스크립트 언어로 작성되어 있어 가독성이 높고 유지보수가 용이
      (4) 빌드 과정에서 필요한 의존성 라이브러리를 미리 캐시해두고 빌드 시간을 단축 할 수 있음

-------------------------------------------------------------------------------------------------------

## 스프링 특징 - IoC (Inversion Of Control) ##
1. 개발자가 프로그램을 제어하는게 아닌 Framework가 프로그램을 제어하는걸 의미
2. 객체 생성 및 생명주기 관리, 의존성 처리 등을 개발자가 아닌 Framework가 직접 관리함
3. 주요 용어
   1) IoC Container
      (1) IoC를 구현한 구현체
      (2) 객체의 라이프사이클 및 의존성 처리를 자동으로 수행해주는 주체
      (3) Spring Framework의 대표적인 IoC 컨테이너는 ApplicationContext 임
   2) Bean
      (1) Spring IoC Container에서 관리되는 객체
      (2) 즉, 스프링에서는 Bean을 생성 및 초기화하고 의존성 주입 등의 일을
          IoC 컨테이너를 통해 자동으로 처리할 수 있음
   3) Bean Factory
      (1) Spring IoC Container의 가장 기본적인 형태로 Bean의 라이프사이클을 관리

   → 정리 : 개발할 때 필요한 객체들을 IoC 컨테이너가 관리할 수 있도록 Bean으로 등록시켜 사용


## Bean 등록 방법 ##
1. Spring Bean Configuration File(XML)을 통해 등록하는 방법 (전통적인 방법)
2. @Configuration Java File을 통해 등록하는 방법 (요즘 선호하는 방법)
3. 직접 컨트롤할 수 있는 클래스 같은 경우 어노테이션을 활용하여 component-scan을 활용하는 방법


## Spring IoC Container 종류 및 계층 구조 ##
1. BeanFactory
   → 스프링 빈 설정파일(Spring Bean Configuration File)에 등록된 Bean들을 생성하고 관리하는 가장 기본적인 컨테이너 형태
2. ApplicationContext
   → BeanFactory를 조금 더 확장하여 트랜잭션 관리, 메세지 기반 다국어 처리 등 추가적인 기능 제공
3. GenericXmlApplicationContext
   → 파일 시스템 또는 클래스 경로에 있는 XML 설정 파일을 로딩하여 <bean> 태그로 등록된 클래스들을 Bean으로 관리하는 컨테이너
4. AnnotaionApplicationContext
   → @Configuration 자바 파일을 로딩하여 @Bean으로 등록된 클래스들을 Bean으로 관리하는 컨테이너

* 계층 구조
  BeanFactory
    ㄴ ApplicationContext
         ㄴ AbstractContext
              ㄴ GenericApplicationContext
                   ㄴ GenericXmlApplicationContext
                   ㄴ AnnotationApplicationContext

-------------------------------------------------------------------------------------------------------

## Spring Bean Configuration File ##
1. Bean(객체)을 만들어주는 xml 파일
2. 만들어진 Bean은 IoC컨테이너에 보관됨
3. 주요 엘리먼트
   1) <bean>            : Bean을 생성해주는 태그
   2) <property>        : 생성된 객체의 필드에 setter 메소드로 값 주입 시 사용되는 태그
   3) <constructor-arg> : Bean 생성시 매개변수 생성자를 이용하여 값 주입 시 사용되는 태그

* <bean>
1) 빈을 생성해주는 태그 (내부적으로 객체가 생성되어 Bean컨테이너에 등록됨)
2) 주요 속성
    → class : 빈으로 등록시키고자 하는 클래스 풀네임
    → id    : 해당 빈의 이름

* <property>
1) 생성되는 객체의 필드에 setter 메소드로 값을 주입(DI)할 때 사용되는 태그
2) Setter Injection
3) 주요 속성
    → name  : 값을 주입하고자 하는 필드명
    → value : 담고자하는 데이터 (primitive type)
    → ref   : 담고자하는 데이터 (reference type)

* <constructor-arg>
1) 매개변수 생성자를 통해 필드에 값을 주입(DI)하면서 객체 생성되도록 하는 태그
2) Constructor Injection
3) 주요 속성
    → value : 담고자하는 데이터 (primitive type)
    → ref   : 담고자하는 데이터 (reference type)

-------------------------------------------------------------------------------------------------------

## @Configuration ##
1. Spring Bean Configuration File의 역할을 대신해줄 Java클래스에게 부여하는 어노테이션
2. 해당 Java 파일 내에 @Bean 어노테이션을 통해 Bean을 등록

## @Bean ##
1. Java에서 Bean을 등록할 때 사용하는 어노테이션
2. Bean 등록용 메소드 상단에 @Bean 어노테이션을 기술
3. 해당 메소드의 메소드명이 Bean의 id로 지정되고 반환타입이 Bean 객체의 타입

-------------------------------------------------------------------------------------------------------

## @Component ##
1. <bean> 태그와 동일한 역할로 일반 객체를 Bean으로 등록 시 사용
2. 기본적으로 Bean의 id는 클래스명을 따서 지정됨
3. 만일 직접 Bean의 id를 지정하고 싶을 경우 어노테이션에 value 속성으로 작성
4. 특수 목적에 따라 세부 기능을 제공하는 좀 더 구체화된 @Controller, @Service, @Repository 등이 존재

## @Controller ##
1. @Component를 확장한 어노테이션
2. View에서 전달된 요청과 응답을 처리해주는 클래스를 Bean으로 등록할 때 주로 사용
3. 웹 요청 처리에 특화된 역할을 추가로 수행

## @Service ##
1. @Component를 확장한 어노테이션
2. Controller에서 전달받은 데이터를 가지고 여러 저장소(Repository)와 상호작용하여
   핵심 비즈니스 로직을 수행하는 클래스를 Bean으로 등록할 때 주로 사용

## @Repository ##
1. @Component를 확장한 어노테이션
2. 데이터베이스에 접근하는 역할의 클래스를 Bean으로 등록할 때 주로 사용
3. 주로 DB의 CRUD 작업을 담당


## Component Scan ##
1. base package로 설정된 하위 경로의 클래스들을 스캔(빈 스캐닝)하면서
   특정 어노테이션을 가지고 있는 클래스들을 Bean으로 등록해주는 기능
2. @Component와 특수 목적에 따라 세분화된 어노테이션들을 인식하여 Bean으로 등록됨

-------------------------------------------------------------------------------------------------------

## 정리 ##
1. IoC
    → 개발자가 아닌 프레임워크가 프로그램의 흐름을 전반적으로 제어함 (객체 생성 및 생명주기 관리 등)
2. IoC Container
    → 스프링이 관리하는 객체(Bean)들이 담겨있는 공간
    → 기본적으로 싱글톤이 적용되어있어 객체가 매번 생성되지 않고 한번 생성해둔걸 재사용할 수 있음
    → 개발에 필요한 객체들을 Bean으로 등록해서 사용하면됨
3. Bean 등록 방법
    → xml 방식        : Spring Bean Configuration File(xml)에서 <bean> 태그 이용해서 등록
    → java 방식       : @Configuration Java 파일에서 @Bean 이용해서 등록
    → annotation 방식 : @Component 관련 어노테이션을 부여한 후 component-scan에 의해 Bean으로 등록
4. IoC Container에 등록된 Bean객체를 가져오기
    → 빈 등록 구문이 쓰여져있는 파일(xml, java)을 로드하면서 IoC 컨테이너 생성 후 getBean으로 가져오기
    → DI 관련 어노테이션(@Inject, @Resource, @Autowired)을 사용하는 방법

